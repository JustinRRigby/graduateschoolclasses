dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
plot(1:20, n10, col='blue', type='l', ylim=c(0,1), las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000, col='red') + lines(1:20, n1e6, col='black') + mtext(aas, 1, at=1:20, line=1)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dGu, N){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
plot(1:20, n10, col='blue', type='l', ylim=c(0,1), las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000, col='red') + lines(1:20, n1e6, col='black') + mtext(aas, 1, at=1:20, line=1)
plot(1:20, n10, col='blue', type='l', ylim=c(0,1), las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele')
lines(1:20, n1000, col='red')
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
mtext(aas, 1, at=1:20, line=1
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
mtext(aas, 1, at=1:20, line=1)
lines(1:20, n1e6, col='black')
r
r <- pfold()
ddgus <- seq(0,-9.5,-0.5)
r <- pfold()
r <- pfold(0)
pfold <- function(dgu.wt, ddgus) {p.i <- (1+exp(-(dgu.wt+ddgus)/0.6))^-1
return(p.i)}
r <- pfold(0)
r <- pfold(dgu.wt, 0)
pfold <- function(dgu.wt, ddgus) {p.i <- ((1+exp(-(dgu.wt+ddgus)/0.6))^-1)
return(p.i)}
r <- pfold(dgu.wt, 0)
pfold <- function(dgu.wt, ddgus) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.6)))
return(p.i)}
pfold <- function(dgu.wt, ddgus) {p.i <- (1/(1+e(-(dgu.wt+ddgus)/0.6)))
return(p.i)}
1.987e-3
1.987e-3*293.15
pfold <- function(dgu.wt, ddgus) {p.i <- (1/(1+e(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r <- pfold(dgu.wt, 0)
pfold <- function(dgu.wt, ddgus) {p.i <- (1/(1+e(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r <- pfold(dgu.wt, 0)
pfold <- function(dgu.wt, ddgus) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r <- pfold(dgu.wt, 0)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dGu, N){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
ddgus <- seq(0,-9.5,-0.5)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Calculate results
n10 <- eq.fix(ddgus, 10)
r.i <- pfold(ddgus)
ddgus <- seq(0,-9.5,-0.5)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus)
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
# Calculate results
n10 <- eq.fix(ddgus, 10)
pfold <- function(ddgus, dgu.wt) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus)
eq.props <- sapply(r.i, function(r) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus)
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus, dgu.wt)
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, N){
r.i <- pfold(ddgus, dgu.wt)
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, 10)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus, dgu.wt)
N
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, N){
r.i <- pfold(ddgus, dgu.wt)
N <- N
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, N){
r.i <- pfold(ddgus, dgu.wt)
N <- N
eq.props <- sapply(r.i, function(r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
eq.props <- sapply(r.i, function() {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, N){
r.i <- pfold(ddgus, dgu.wt)
N <- N
eq.props <- sapply(r.i, function() {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, N){
r.i <- pfold(ddgus, dgu.wt)
N <- N
eq.props <- sapply(r.i, function(r.i) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
eq.props <- sapply(r.i, function(r.i) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, N){
r.i <- pfold(ddgus, dgu.wt)
N <- N
eq.props <- sapply(r.i, function(r.i, r, N) {
(exp(2*N*(r - mean(r.i)))/(sum(exp(2*N*(r - mean(r.i))))-(exp(2*N*(r - mean(r.i))))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
r.i
eq.fix <- function(ddGu.i, dGu, n){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - mean(r.i)))/(sum(exp(2*n*(r - mean(r.i))))-(exp(2*n*(r - mean(r.i))))))
})
return(eq.props)
}
n10 <- eq.fix(ddgus, dgu.wt, 10)
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - mean(r.i)))/(sum(exp(2*n*(r - mean(r.i))))-(exp(2*n*(r - mean(r.i))))))
})
return(eq.props)
}
n10 <- eq.fix(ddgus, dgu.wt, 10)
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - mean(r.i)))/(sum(exp(2*n*(r - mean(r.i))))-(exp(2*n*(r - mean(r.i))))))
})
return(eq.props)
}
n10 <- eq.fix(ddgus, dgu.wt, 10)
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus, dgu.wt)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - mean(r.i)))/(sum(exp(2*n*(r - mean(r.i))))-(exp(2*n*(r - mean(r.i))))))
})
return(eq.props)
}
n10 <- eq.fix(ddgus, dgu.wt, 10)
mean(r.i)
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus, dgu.wt)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
n10 <- eq.fix(ddgus, dgu.wt, 10)
n10
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus, dgu.wt)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),
las=1, log='', xaxt='n', xlab='',
ylab='Frequency of allele')
lines(1:20, n1000, col='red')
lines(1:20, n1e6, col='black')
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele')
plot(1:20, n10, col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele')
max(n10)
ddgus <- seq(0,-9.5,-0.5)
count(ddgus)
ddgus
pfold <- function(ddgus, dgu.wt) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
meow <- pfold(ddgus, dgu.wt)
meow
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n10
?sapply
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus, dgu.wt)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- lapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n10
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
r.i <- pfold(ddgus, dgu.wt)
# equilbrium proportions, given the log fitnesses r.i
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
r.i <- pfold(ddgus, dgu.wt)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
pfold <- function(ddgus, dgu.wt) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r <- pfold(dgu.wt, 0)
pfold <- function(ddgus, dgu.wt) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r.i <- pfold(ddgus, dgu.wt)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
r.i <- pfold(ddgus, dgu.wt)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n10
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele')
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele')
lines(1:20, n1000[,1], col='red')
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red')
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red') + lines(1:20, n1e6[,1], col='black')
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red') + lines(1:20, n1e6[,1], col='black') + mtext(aas, 1, at=1:20, line=1)
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red') + lines(1:20, n1e6[,1], col='black') + mtext(aas, 1, at=1:20, line=1)
# split a string into characters
charlist <- function(x,sep=''){
t(sapply(x, function(m) {unlist(strsplit(m,sep))}))}
aas <- charlist('ACDEFGHIKLMNPQRSTVWY')
r <- pfold(dgu.wt, 0)
pfold <- function(ddgus, dgu.wt) {p.i <- (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
r.i <- pfold(ddgus, dgu.wt)
# Equilibrium fixed levels, given many competing alleles.
eq.fix <- function(ddgus, dgu.wt, n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
dgu.wt <- 5.0
ddgus <- seq(0,-9.5,-0.5)
# Calculate results
n10 <- eq.fix(ddgus, dgu.wt, 10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
n1e6 <- eq.fix(ddgus, dgu.wt, 1e6)
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red') + lines(1:20, n1e6[,1], col='black') + mtext(aas, 1, at=1:20, line=1)
n10
#Function to calculate the folding ratio
pfold <- function(ddgus, dgu.wt) {p.i <-      (1/(1+exp(-(dgu.wt+ddgus)/0.582489)))
return(p.i)}
# Function to calculate the frequency of the various Amino Acid Subs.
eq.fix <- function(n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r - r.i))/(sum(exp(2*n*(r - r.i)))-(exp(2*n*(r - r.i)))))
})
return(eq.props)
}
# Calculate results
n10 <- eq.fix(10)
n1000 <- eq.fix(ddgus, dgu.wt, 1000)
# Calculate results
n10 <- eq.fix(10)
n1000 <- eq.fix(1000)
n1e6 <- eq.fix(1e6)
# Calculate results
n10 <- eq.fix(10)
n1000 <- eq.fix(1000)
n1e6 <- eq.fix(1e6)
plot(1:20, n10[,1], col='blue', type='l', ylim=c(0,1),las=1, log='', xaxt='n', xlab='', ylab='Frequency of allele') + lines(1:20, n1000[,1], col='red') + lines(1:20, n1e6[,1], col='black') + mtext(aas, 1, at=1:20, line=1)
1e-6
1e-6*30
3e-5
3e-5*0.4
1.2e-5/0.1
sqrt(0.00012)
# Function to calculate the frequency of the various Amino Acid Subs.
eq.fix <- function(n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r))/(sum(exp(2*n*(r)))-(exp(2*n*(r)))))
})
return(eq.props)
}
# Calculate results
n10 <- eq.fix(10)
n1000 <- eq.fix(1000)
n1e6 <- eq.fix(1e6)
# Function to calculate the frequency of the various Amino Acid Subs.
eq.fix <- function(n){
eq.props <- sapply(r.i, function(r) {
(exp(2*n*(r.i))/(sum(exp(2*n*(r.i)))-(exp(2*n*(r.i)))))
})
return(eq.props)
}
# Calculate results
n10 <- eq.fix(10)
n1000 <- eq.fix(1000)
n1e6 <- eq.fix(1e6)
1e-13 - 0.5
1e-13 - 0.5
P <- (1-exp(-2*0.5))/(1-exp(-4*10000*0.5))
P
0.6321206/(1/20000)
