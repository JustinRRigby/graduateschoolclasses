```{r}
set.seed(1984)
hw_errors <- function(n){
num_of_emails.df <- data.frame() #Creation of Empty Data Frame
for(i in 1:n){x_ind <- 0 #Indicator Variable
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c(0.8,0.2)) #Probability of Error in HW
if(x_ind == 1){num_of_emails.df <- rbind(num_of_emails.df, rpois(1,3))}
} #If there is an error what is the number of emails received with
#respect to the poisson distrubution
no_emails_with_error <- sum(num_of_emails.df == 0) #Sum the number of 0 email occurances
return(1-(no_emails_with_error/n)) #Sum of the number of 0 emails weighted by the total
##number of HW Solutions posted
}
#Therefore, the probability of an error being in the solutions, yet no email
#received about it, is about
hw_errors(50000)
#Therefore, the probability of an error being in the solutions, yet no email
#received about it, is about
(1 - hw_errors(50000))
```{r}
set.seed(1984)
#Therefore, the probability of an error being in the solutions, yet no email
#received about it, is about
(1 - hw_errors(50000))
```{r}
#Function to determine if number is odd
is.odd <- function(x){ x%%2!=0
}
n=50000
p=0.7
prob_geom_odd <- function(n, p){
geom.df <- data.frame()
geom.df <- data.frame(rgeom(n, p))
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
geom.binary.df < (1*geom.df)
return(sum(geom.binary.df)/n)
}
prob_geom_odd(500000, 0.7)
```{r}
#Function to determine if number is odd
is.odd <- function(x){ x%%2!=0
}
n=50000
p=0.7
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p))
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
geom.binary.df <- (1*geom.df)
return(sum(geom.binary.df)/n)
}
prob_geom_odd(500000, 0.7)
```{r}
#Function to determine if number is odd
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p))
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
geom.binary.df <- (1*geom.df)
return(sum(geom.binary.df)/n)
}
prob_geom_odd(500000, 0.7)
1%%2!==0
1%%2!=0
3%%2!=0
2%%2!=0
13%%2!=0
mew <- 13%%2!=0
1+mew
1*mew
rgeom(1000, 0.5)
```{r}
#Function to determine if number is odd
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p))
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
geom.binary.df <- (1*geom.df)
return(1-sum(geom.binary.df)/n)
}
prob_geom_odd(500000, 0.7)
?rgeom
#Function to determine if number is odd
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p))
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
geom.binary.df <- (1*geom.df)
return(1-sum(geom.binary.df)/n)
}
geom.df <- data.frame(rgeom(n, p))
head(geom.df)
pgeom(0.3, 0.7)
head(geom.df)
pgeom(0.3, 0.7)
pgeom(0.3, 0.7)
pgeom(0.3, )
pgeom(100000, 0.7)
pgeom(1000, 0.7)
pgeom(.1000, 0.7)
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0)
head(geom.df)
sum(geom.df)
11611/50000
```{r}
#Function to determine if number is odd
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p)) #Creation of a data frame with random draws
colnames(geom.df) <- c("Binary")
geom.df <- (geom.df%%2!=0) #function to find the odd numbers
return(1-sum(geom.binary.df)/n) #returning the probability
}
prob_geom_odd(500000, 0.7)
#Function to determine if number is odd
prob_geom_odd <- function(n, p){
geom.df <- data.frame(rgeom(n, p)) #Creation of a data frame with random draws
colnames(geom.df) <- c("Binary")
geom.binary.df <- (geom.df%%2!=0) #function to find the odd numbers
return(1-sum(geom.binary.df)/n) #returning the probability
}
prob_geom_odd(500000, 0.7)
?binom
?rbiom
?rbinom
pbiom(101, 1000, 0.5)
pbinom(101, 1000, 0.5)
pbinom(101, 10, 0.5)
pbinom(101, 100, 0.5)
pbinom(50000, 100, 0.5)
pbinom(50000, 101, 0.5)
pbinom(101, 200, 0.5)
prob.binom.odd(101, 500000, 0.5)
prob.binom.odd <- function(n, size, prob){
#Creation of n size draws from a normal distrubution divided by 2 to indicate odd variables
binom.df <- data.frame(rbinom(n, size, prob))
colnames(binom.df) <- c("Binary")
#Since only even numbers will be integers, this is to test if they are integers
binom.binary.df <- (1 *(binom.df%%1==0))
return(1 - (sum(binom.binary.df)/n))
}
prob.binom.odd(101, 500000, 0.5)
prob_norm_odd <- function(n){
norm.df <- data.frame(rnorm(n))
norm.round.df <- round(norm.df)
colnames(norm.round.df) <- c("Binary")
norm.round.binary.df <- (1 *(norm.round.df%%2!=0))
return(1 - (sum(norm.round.binary.df)/n))
}
prob_norm_odd(50000)
```{r}
integrate((1/sqrt(2pi))*e^(-1/2), 0, 0.5)
```{r}
integrate((1/sqrt(2*pi))*e^(-1/2), 0, 0.5)
integrate((1/sqrt(2*pi))*exp(-1/2), 0, 0.5)
```{r}
integrate((1/sqrt(2*pi))*exp(-1/2), 0, 0.5)
```{r}
integrate((1/sqrt(2*pi))exp(-1/2), 0, 0.5)
integrate(1/sqrt(2*pi)*exp(-1/2), 0, 0.5)
integrate((1/sqrt(2*pi)*exp(-1/2), 0, 0.5)
integrate((x^0)*1/sqrt(2*pi)*exp(-1/2), 0, 0.5)
intergrand <- function(x){(x^0)*1/sqrt(2*pi)*exp(-1/2)}
integrate((x^0)*1/sqrt(2*pi)*exp(-1/2), 0, 0.5)
integrate(intergrand, 0, 0.5)
1 - (integrate(intergrand, 0, 0.5))
meow <- 1 - (integrate(intergrand, 0, 0.5))
meow <- (1 - (integrate(intergrand, 0, 0.5)))
intergrand <- function(x){(x^0)*1/sqrt(2*pi)*exp(-1/2)}
meow <- (1 - (integrate(intergrand, 0, 0.5)))
integrate(intergrand, 0, 0.5)
(1 - integrate(intergrand, 0, 0.5))
print(1 - integrate(intergrand, 0, 0.5))
mew <- integrate(intergrand, 0, 0.5)
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5)
prob_0_0.5 + prob_1.5_2.5
View(prob_0_0.5)
prob_0_0.5[["value"]]
prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]
(1 - prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]])
(1 - (prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
?norm
?qnorm
pton(dnorm())
plon(dnorm())
plot(dnorm())
plot(dnorm(x))
plot(dnorm(1))
plot(dnorm(100000))
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=0, sd=1)
plot(x,y, type="l", lwd=1)
dnorm(1)
curve(dnorm(1))
curve(dnorm(x))
?curve
curve(dnorm(x), from = -5, to = 5)
curve(dnorm(x), from = -5, to = 5, ylab = "Density")
curve(dnorm(x), from = -6, to = 6, ylab = "Density")
```{r}
curve(dnorm(x), from = -5, to = 5, ylab = "Density")
```{r}
intergrand <- function(x){(x^0)*1/sqrt(2*pi)*exp(-1/2)} #The pmf of the normal distrubution where N(0,1)
intergrand <- function(x){(x^0)*1/sqrt(2*pi)*exp(-1/2)} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5)
(1 - 2(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
(1 - 2(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
ans <- (1 - 2(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5)
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4 <- integrate(intergrand, 3.5, 4)
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4[["value"]]))
intergrand <- function(x){1/sqrt(2*pi)*exp(x^2/2)} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4 <- integrate(intergrand, 3.5, 4)
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4[["value"]]))
intergrand <- function(x){1/sqrt(2*pi)*exp(-(x^2/2))} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4 <- integrate(intergrand, 3.5, 4)
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4[["value"]]))
```{r}
intergrand <- function(x){1/sqrt(2*pi)*exp(-(x^2/2))} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5)
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5)
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5)
```{r}
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5) #from 1.5 to 2.5
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5) #from 3.5 to 4.5
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
meow data.frame(c(1, 2, 3, 4, 5))
meow data.frame(c(1, 2, 3, 4, 5))
meow data.frame(6
meow data.frame(6)
meow <- data.frame(c(1, 2, 3, 4, 5))
mewo
meow
```{r}
curve(dnorm(x), from = -5, to = 5, ylab = "Density")
```{r}
intergrand <- function(x){1/sqrt(2*pi)*exp(-(x^2/2))} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5) #from 1.5 to 2.5
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5) #from 3.5 to 4.5
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
intergrand <- function(x){1/sqrt(2*pi)*exp(-(x^2/2))} #The pmf of the normal distrubution where N(0,1)
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
View(prob_0_0.5)
```{r}
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
prob_0_0.5 <- integrate(intergrand, 0, 0.5) #from 0 to 0.5
prob_1.5_2.5 <- integrate(intergrand, 1.5, 2.5) #from 1.5 to 2.5
prob_3.5_4.5 <- integrate(intergrand, 3.5, 4.5) #from 3.5 to 4.5
(1 - 2*(prob_0_0.5[["value"]] + prob_1.5_2.5[["value"]] + prob_3.5_4.5[["value"]]))
read.csv("~/Desktop/metabGWAS/Metabolomics_GWAS/Beginning/metabGWAS 1/Area_Data/All_Reps_data.csv")
fars <- read.csv("~/Desktop/metabGWAS/Metabolomics_GWAS/Beginning/metabGWAS 1/Area_Data/All_Reps_data.csv")
head fars
head(fars)
area_geno <- fars$Ratio_of_Leaf_Area
bolting <- fars$bolting
?lm
lm(bolting, area_geno)
?cov
var(bolting, area_geno)
cov(bolting, area_geno)
head boltign
if(bolting ==! 1){bolting == 0}
if(bolting==!1){bolting == 0}
if(bolting==!1){bolting==0}
head(bolting)
cov(fars$bolting, fars$Ratio_of_Leaf_Area)
meow <- cov(fars$bolting, fars$Ratio_of_Leaf_Area)
plot(meow)
remove(meow)
if(bolting==!1){bolting==0}
man anova()
?anova
cov(bolting, area_geno)
lm(bolting, area_geno)
lm(x = bolting, y = area_geno)
?lm
lm(bolting ~ area_geno)
meow <- lm(bolting ~ area_geno)
anova(meow)
4*4
16/52
52-16
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
banana <- function(n){
for(i in 1:n){x_ind <- 0 #Indicator Variable
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
}
return(x_ind)
}
banana(200)
banana(200)
banana(200)
banana(200)
banana(200)
banana(200)
banana(200)
banana(200)
```{r}
banana <- function(n){
0 <- data.frame()#Indicator Variable
for(i in 1:n){
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
}
return(x_ind)
}
banana(200)
```{r}
banana <- function(n){
x_ind <- data.frame()#Indicator Variable
for(i in 1:n){
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
}
return(x_ind)
}
banana(200)
```{r}
banana <- function(n){
x_ind <- data.frame() #Indicator Variable
x_ind <-for(i in 1:n){
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
}
return(x_ind)
}
banana(200)
banana <- function(n){
x_ind <- data.frame() #Indicator Variable
for(i in 1:n){
x_ind <- sample(c(0,1),1,replace = TRUE, prob = c((5/7), ((2/7)))) #Probability of Error in HW
}
return(x_ind)
}
banana(200)
banana(200)
banana(200)
banana(200)
?sample
x_ind <- data.frame(1:52) #Indicator Variable
x_ind
# Define suits, cards, values
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
cards <- c("Ace", "Deuce", "Three", "Four","Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
values <- c(0, 2:9, rep(10, 4))
totalNumOfDecks <- 2
# Build deck, replicated proper number of times
deck <- expand.grid(cards=cards, suits=suits)
deck$value <- values
deck <- deck[rep(seq(nrow(deck)), totalNumOfDecks),]
deck
deck
dechead deck
head(dec)
head(deck)
sample(c(O,1,2,3))
sample(c(O,1,2,3))
sample(c(1,2,3))
sample(c(1,2,3), prob = c(1, 2, 3))
sample(c(1,2,3), prob = c(1, 2, 3))
sample(c(1,2,3), prob = c(1, 2, 3))
sample(c(1,2,3), prob = c(1, 2, 3))
sample(c(1,2,3),1, prob = c(1, 2, 3))
sample(c(1,2,3),1, prob = c(1, 2, 3))
sample(c(1,2,3),2, prob = c(1, 2, 3))
sample(c(1,2,3),2, prob = c(0.5, 0.5, 0.5))
sample(c(1,2,3),2, prob = c(0.5, 0.5, 0.5))
sample(c(1,2,3),2, prob = 0.5
)
sample(c(1,2,3),2, prob = 0.5, 0.5,0.5
)
sample(c(1,2,3),2, prob = (0.5,0.5,0.5)
sample(c(1,2,3),2, prob = (0.5,0.5,0.5))
sample(c(1,2,3),2, prob = c(0.5,0.5,0.5))
install.packages("partitions")
install.packages("polynom")
install.packages("partitions")
install.packages("gmp")
data <- data.frame(red_deck = c('Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card'), full_deck = c('Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card'))
full_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
full_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
reps <- 500
red_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(red_deck_sample = sample(data$red_deck, 10, replace = FALSE))}))
full_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
```{r}
library(data.table)
set.seed(1984)
reps <- 500
dist_of_face_cards.df <- data.frame(replicate(reps, {draw_ten(red_deck)}))
data <- data.frame(red_deck = c('Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card'), full_deck = c('Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Face_card', 'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card',  'Non_face_card'))
a <- data.frame(sample(data$red_deck, 10, replace = FALSE))
red_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(red_deck_sample = sample(data$red_deck, 10, replace = FALSE))}))
data.table(red_deck_draw)
full_deck_draw <- data.frame(reddeck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
data.table(full_deck_draw)
red_deck_draw <- function(rep){data.frame(reddeck = replicate(reps, {data.frame(red_deck_sample = sample(data$red_deck, 10, replace = FALSE))}))
}
data.table(red_deck_draw(5000))
full_deck_draw <- data.frame(Full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
data.table(full_deck_draw)
?colsum
?Colsum
?colSum
?colSums
a <- colSums(full_deck_draw)
a <- colSums(full_deck_draw[,-1])
b <- data.table(full_deck_draw(5000))
full_deck_draw <- data.frame(Full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
b <- data.table(full_deck_draw(5000))
full_deck_draw <- function(x){
data.frame(Full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
}
b <- data.table(full_deck_draw(5000))
a <- colSums(b)
a <- colSums(b[,-1])
a <- colSums(b)
a <- colSums(b[,])
a <- colSums(b[,1])
a <- colSums(b[,0])
a
a <- colSums(b)
a <- colSums(data.frame(b)
)\
a <- colSums(data.frame(b))
full_deck_draw <- function(x){
data.frame(full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
}
b <- data.table(full_deck_draw(5000))
a <- colSums(b)
head(b)
data.table(b)
b <- data.fram(full_deck_draw(5000))
b <- data.frame(full_deck_draw(5000))
head(b)
View(b)
a <- colSums(b)
full_deck_results <- data.frame(full_deck_draw(5000))
full_deck_results.df <- data.frame(full_deck_draw(5000))
?if
set.seed(1984)
reps <- 500
Face_card <- 1
Non_face_card <- 0
data <- data.frame(red_deck = c(1, 1, 1, 1, 1, 1 ,1, 1, 0 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), full_deck = c(1, 1, 1, 1, 1, 1 ,1, 1, 0 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
red_deck_draw <- function(rep){data.frame(red_deck = replicate(reps, {data.frame(red_deck_sample = sample(data$red_deck, 10, replace = FALSE))}))
}
data.table(red_deck_draw(5000))
red_deck_results.df  <- data.frame(red_deck_draw(5000))
full_deck_draw <- function(x){
data.frame(full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
}
full_deck_results.df <- data.frame(full_deck_draw(5000))
b <- colSums(full_deck_results.df)
b
full_deck_results.df <- colSums(data.frame(full_deck_draw(50000)))
hist(full_deck_results.df)
hist(red_deck_results.df)
library(data.table)
set.seed(1984)
reps <- 500
red_deck_draw <- function(rep){data.frame(red_deck = replicate(reps, {data.frame(red_deck_sample = sample(data$red_deck, 10, replace = FALSE))}))
}
red_deck_results.df  <- colSums(data.frame(red_deck_draw(50000)))
full_deck_draw <- function(x){
data.frame(full_deck = replicate(reps, {data.frame(full_deck_sample = sample(data$full_deck, 10, replace = FALSE))}))
}
full_deck_results.df <- colSums(data.frame(full_deck_draw(50000)))
#Histogram of Red Deck Distrubution
hist(red_deck_results.df)
#Histogram of Full Deck Distrubution
hist(full_deck_results.df)
#Histogram of Full Deck Distrubution
hist(full_deck_results.df/50000)
#Histogram of Full Deck Distrubution
hist(full_deck_results.df)
head(data)
table(full_deck_results.df)
table(red_deck_results.df)
?hpergeom
?Hypergeometric
dhyper(0, 16, 36, 10)
dhyper(1, 16, 36, 10)
dhyper(1:10, 16, 36, 10)
sum(dhyper(1:10, 16, 36, 10))
sum(dhyper(0:10, 16, 36, 10))
